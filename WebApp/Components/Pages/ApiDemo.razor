@page "/api-demo"
@using System.Security.Claims
@using WebApp.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web.UI
@inject ApiService ApiService
@inject DownstreamApiService DownstreamApiService
@inject ApiServiceWithHandler ApiServiceWithHandler
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>API Demo</PageTitle>

<h1>API Demo</h1>

<p>This page demonstrates calling the two APIs from the Blazor web app.</p>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>APINoGraph</h3>
            </div>
            <div class="card-body">
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPINoGraph" disabled="@isLoadingNoGraph">
                    @if (isLoadingNoGraph)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APINoGraph (Manual Token)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(noGraphResult))
                    {
                        <div class="alert alert-info">@noGraphResult</div>
                    }
                </div>
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPINoGraphDownstream" disabled="@isLoadingNoGraphForApp">
                    @if (isLoadingNoGraphForApp)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APINoGraph (DownstreamApi ForApp)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(noGraphDownstreamResult))
                    {
                        <div class="alert alert-info">@noGraphDownstreamResult</div>
                    }
                </div>
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPINoGraphWithHandler" disabled="@isLoadingNoGraphWithHandler">
                    @if (isLoadingNoGraphWithHandler)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APINoGraph (HttpClient Handler)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(noGraphWithHandlerResult))
                    {
                        <div class="alert alert-info">@noGraphWithHandlerResult</div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>APIWithGraph</h3>
            </div>
            <div class="card-body">
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPIWithGraph" disabled="@isLoadingWithGraph">
                    @if (isLoadingWithGraph)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APIWithGraph (Manual Token)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(withGraphResult))
                    {
                        <div class="alert alert-info">@withGraphResult</div>
                    }
                </div>
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPIWithGraphDownstream" disabled="@isLoadingWithGraphForUser">
                    @if (isLoadingWithGraphForUser)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APIWithGraph (DownstreamApi ForUser)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(withGraphDownstreamResult))
                    {
                        <div class="alert alert-info">@withGraphDownstreamResult</div>
                    }
                </div>
                <button class="btn btn-primary mb-2 w-100" @onclick="CallAPIWithGraphWithHandler" disabled="@isLoadingWithGraphWithHandler">
                    @if (isLoadingWithGraphWithHandler)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    }
                    else
                    {
                        <span>Call APIWithGraph (HttpClient Handler)</span>
                    }
                </button>
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(withGraphWithHandlerResult))
                    {
                        <div class="alert alert-info">@withGraphWithHandlerResult</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? noGraphResult;
    private string? noGraphDownstreamResult;
    private string? noGraphWithHandlerResult;
    private string? withGraphResult;
    private string? withGraphDownstreamResult;
    private string? withGraphWithHandlerResult;
    private bool isLoadingNoGraph = false;
    private bool isLoadingNoGraphForApp = false;
    private bool isLoadingNoGraphWithHandler = false;
    private bool isLoadingWithGraph = false;
    private bool isLoadingWithGraphForUser = false;
    private bool isLoadingWithGraphWithHandler = false;
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task CallAPINoGraph()
    {
        isLoadingNoGraph = true;
        StateHasChanged();
        try
        {
            noGraphResult = await ApiService.CallAPINoGraphAsync();
        }
        finally
        {
            isLoadingNoGraph = false;
            StateHasChanged();
        }
    }

    private async Task CallAPINoGraphDownstream()
    {
        isLoadingNoGraphForApp = true;
        StateHasChanged();
        try
        {
            noGraphDownstreamResult = await DownstreamApiService.CallAPINoGraphAsync();
        }
        finally
        {
            isLoadingNoGraphForApp = false;
            StateHasChanged();
        }
    }

    private async Task CallAPINoGraphWithHandler()
    {
        isLoadingNoGraphWithHandler = true;
        StateHasChanged();
        try
        {
            noGraphWithHandlerResult = await ApiServiceWithHandler.CallAPINoGraphAsync();
        }
        finally
        {
            isLoadingNoGraphWithHandler = false;
            StateHasChanged();
        }
    }

    private async Task CallAPIWithGraph()
    {
        isLoadingWithGraph = true;
        StateHasChanged();
        try
        {
            withGraphResult = await ApiService.CallAPIWithGraphAsync();
        }
        catch (Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException)
        {
            NavigationManager.NavigateTo("/Consent/ApiWithGraph", forceLoad: true);
            return;
        }
        catch (Exception ex)
        {
            withGraphResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingWithGraph = false;
            StateHasChanged();
        }
    }

    private async Task CallAPIWithGraphDownstream()
    {
        isLoadingWithGraphForUser = true;
        StateHasChanged();
        try
        {
            withGraphDownstreamResult = await DownstreamApiService.CallAPIWithGraphAsync();
        }
        finally
        {
            isLoadingWithGraphForUser = false;
            StateHasChanged();
        }
    }

    private async Task CallAPIWithGraphWithHandler()
    {
        isLoadingWithGraphWithHandler = true;
        StateHasChanged();
        try
        {
            withGraphWithHandlerResult = await ApiServiceWithHandler.CallAPIWithGraphAsync(async () =>
            {
                NavigationManager.NavigateTo("/Consent/ApiWithGraph", forceLoad: true);
            });
        }
        catch (Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException)
        {
            NavigationManager.NavigateTo("/Consent/ApiWithGraph", forceLoad: true);
            return;
        }
        catch (Exception ex)
        {
            withGraphWithHandlerResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoadingWithGraphWithHandler = false;
            StateHasChanged();
        }
    }
}